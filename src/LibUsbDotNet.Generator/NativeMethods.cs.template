//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright © 2006-2010 Travis Robinson. All rights reserved.
// Copyright © 2011-2018 LibUsbDotNet contributors. All rights reserved.
// 
// website: http://github.com/libusbdotnet/libusbdotnet
// 
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2 of the License, or 
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful, but 
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
// 
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. or 
// visit www.gnu.org.
// 
//

using LibUsbDotNet.LibUsb;
using System;
using System.Runtime.InteropServices;

namespace LibUsbDotNet
{
    internal static unsafe partial class NativeMethods
    {
        /// <summary>
        /// Use the default struct alignment for this platform.
        /// </summary>
        internal const int Pack = 0;


        // StdCall on Windows, Cdecl on other platforms.
        internal const CallingConvention LibUsbCallingConvention = CallingConvention.Winapi;

#if WIN_X64 || WIN_X86 || NET45 || WIN7_X64 || WIN7_X86 // win7-x64, win7-x64 during testing only.
        internal const string LibUsbNativeLibrary = "libusb-1.0.dll";
#elif LINUX_X64 || LINUX_ARM64 || LINUX_ARM || UBUNTU || UBUNTU_16_04_X64 || UBUNTU_16_04_ARM64 // ubuntu during testing only.
        internal const string LibUsbNativeLibrary = "libusb-1.0.so.0";
#elif OSX_X64 || OSX_10_12_X64 // osx during testing only
        internal const string LibUsbNativeLibrary = "libusb-1.0.0.dylib";
#elif REFERENCE_ASSEMBLY
        internal const string LibUsbNativeLibrary = "usb";
#else // try to rely on .NET Core to append the correct suffix
        internal const string LibUsbNativeLibrary = "libusb-1.0";
#endif

        {{#.}}
        [DllImport(LibUsbNativeLibrary, CallingConvention = LibUsbCallingConvention, EntryPoint = "{{NativeName}}")]
        public static extern {{ReturnType}} {{Name}}({{#Arguments}}{{Type}} {{Name}}{{ArgumentSeparator Arguments . }}{{/Arguments}});

        {{/.}}
    }
}
